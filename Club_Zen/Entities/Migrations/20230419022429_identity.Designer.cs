// <auto-generated />
using System;
using Entities.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Entities.Migrations
{
    [DbContext(typeof(BD_Club_ZenContext))]
    [Migration("20230419022429_identity")]
    partial class identity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Authentication.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Entities.Entities.ClubMember", b =>
                {
                    b.Property<int>("IdClubMember")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_clubMember");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdClubMember"), 1L, 1);

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nchar(15)")
                        .HasColumnName("estado")
                        .IsFixedLength();

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("date")
                        .HasColumnName("fechaFin");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("date")
                        .HasColumnName("fechaInicio");

                    b.Property<string>("Pago")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nchar(15)")
                        .HasColumnName("pago")
                        .IsFixedLength();

                    b.HasKey("IdClubMember");

                    b.ToTable("Club_Member", (string)null);
                });

            modelBuilder.Entity("Entities.Entities.Estado", b =>
                {
                    b.Property<int>("IdEstado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_estado");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEstado"), 1L, 1);

                    b.Property<string>("Estado1")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("estado")
                        .IsFixedLength();

                    b.HasKey("IdEstado");

                    b.ToTable("Estados");
                });

            modelBuilder.Entity("Entities.Entities.Evento", b =>
                {
                    b.Property<int>("IdEvento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_evento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEvento"), 1L, 1);

                    b.Property<short>("AsistenciaReservada")
                        .HasColumnType("smallint")
                        .HasColumnName("asistenciaReservada");

                    b.Property<short>("CupoMax")
                        .HasColumnType("smallint")
                        .HasColumnName("cupoMax");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("desc");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("precio");

                    b.HasKey("IdEvento");

                    b.ToTable("Eventos");
                });

            modelBuilder.Entity("Entities.Entities.Factura", b =>
                {
                    b.Property<int>("IdFactura")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_factura");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFactura"), 1L, 1);

                    b.Property<byte[]>("Fecha")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("fecha");

                    b.Property<int>("IdMetodoPago")
                        .HasColumnType("int")
                        .HasColumnName("id_metodoPago");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("total");

                    b.HasKey("IdFactura");

                    b.HasIndex("IdMetodoPago");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Facturas");
                });

            modelBuilder.Entity("Entities.Entities.LineaFactura", b =>
                {
                    b.Property<int>("IdLinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_linea");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLinea"), 1L, 1);

                    b.Property<short>("Cantidad")
                        .HasColumnType("smallint")
                        .HasColumnName("cantidad");

                    b.Property<string>("Detalle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("detalle");

                    b.Property<int>("IdFactura")
                        .HasColumnType("int")
                        .HasColumnName("id_factura");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("monto");

                    b.HasKey("IdLinea");

                    b.HasIndex("IdFactura");

                    b.ToTable("Linea_Factura", (string)null);
                });

            modelBuilder.Entity("Entities.Entities.Mesa", b =>
                {
                    b.Property<int>("IdMesa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_mesa");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMesa"), 1L, 1);

                    b.Property<short>("Cantidad")
                        .HasColumnType("smallint")
                        .HasColumnName("cantidad");

                    b.HasKey("IdMesa");

                    b.ToTable("Mesas");
                });

            modelBuilder.Entity("Entities.Entities.MetodoPago", b =>
                {
                    b.Property<int>("IdMetodoPago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_metodoPago");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMetodoPago"), 1L, 1);

                    b.Property<short>("CodigoSeguridad")
                        .HasColumnType("smallint")
                        .HasColumnName("codigoSeguridad");

                    b.Property<DateTime>("FechaExp")
                        .HasColumnType("date")
                        .HasColumnName("fechaExp");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    b.Property<long>("NumTarjeta")
                        .HasColumnType("bigint")
                        .HasColumnName("numTarjeta");

                    b.Property<string>("TipoTarjeta")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("tipoTarjeta")
                        .IsFixedLength();

                    b.Property<string>("TitularTarjeta")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("titularTarjeta");

                    b.HasKey("IdMetodoPago");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Metodo_Pago", (string)null);
                });

            modelBuilder.Entity("Entities.Entities.Permiso", b =>
                {
                    b.Property<int>("IdPermiso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_permiso");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPermiso"), 1L, 1);

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("desc");

                    b.HasKey("IdPermiso");

                    b.ToTable("Permisos");
                });

            modelBuilder.Entity("Entities.Entities.Ranchito", b =>
                {
                    b.Property<int>("IdRanchito")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_ranchito");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRanchito"), 1L, 1);

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("desc");

                    b.HasKey("IdRanchito");

                    b.ToTable("Ranchitos");
                });

            modelBuilder.Entity("Entities.Entities.ReservacionEvento", b =>
                {
                    b.Property<int>("IdReservacionEvento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_reservacionEvento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdReservacionEvento"), 1L, 1);

                    b.Property<int>("IdEvento")
                        .HasColumnType("int")
                        .HasColumnName("id_evento");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    b.Property<byte[]>("LogFecha")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("logFecha");

                    b.Property<int>("Personas")
                        .HasColumnType("int")
                        .HasColumnName("personas");

                    b.HasKey("IdReservacionEvento");

                    b.HasIndex("IdEvento");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Reservacion_Eventos", (string)null);
                });

            modelBuilder.Entity("Entities.Entities.ReservacionMesa", b =>
                {
                    b.Property<int>("IdReservacionMesa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_reservacionMesa");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdReservacionMesa"), 1L, 1);

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime")
                        .HasColumnName("fechaFin");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime")
                        .HasColumnName("fechaInicio");

                    b.Property<int>("IdMesa")
                        .HasColumnType("int")
                        .HasColumnName("id_mesa");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    b.Property<byte[]>("LogFecha")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("logFecha");

                    b.Property<int>("Personas")
                        .HasColumnType("int")
                        .HasColumnName("personas");

                    b.HasKey("IdReservacionMesa");

                    b.HasIndex("IdMesa");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Reservacion_Mesa", (string)null);
                });

            modelBuilder.Entity("Entities.Entities.ReservacionRanchito", b =>
                {
                    b.Property<int>("IdReservacionRanchito")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_reservacionRanchito");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdReservacionRanchito"), 1L, 1);

                    b.Property<DateTime>("FechaReserva")
                        .HasColumnType("date")
                        .HasColumnName("fechaReserva");

                    b.Property<int>("IdRanchito")
                        .HasColumnType("int")
                        .HasColumnName("id_ranchito");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    b.Property<byte[]>("LogFecha")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("logFecha");

                    b.HasKey("IdReservacionRanchito");

                    b.HasIndex("IdRanchito");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Reservacion_Ranchito", (string)null);
                });

            modelBuilder.Entity("Entities.Entities.ReservacionTenni", b =>
                {
                    b.Property<int>("IdReservacionTennis")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_reservacionTennis");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdReservacionTennis"), 1L, 1);

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime")
                        .HasColumnName("fechaFin");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime")
                        .HasColumnName("fechaInicio");

                    b.Property<int>("IdTennisCourt")
                        .HasColumnType("int")
                        .HasColumnName("id_tennisCourt");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    b.Property<byte[]>("LogFecha")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("logFecha");

                    b.HasKey("IdReservacionTennis");

                    b.HasIndex("IdTennisCourt");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Reservacion_Tennis", (string)null);
                });

            modelBuilder.Entity("Entities.Entities.TennisCourt", b =>
                {
                    b.Property<int>("IdTennisCourt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_tennisCourt");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTennisCourt"), 1L, 1);

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("desc");

                    b.HasKey("IdTennisCourt");

                    b.ToTable("Tennis_Courts", (string)null);
                });

            modelBuilder.Entity("Entities.Entities.Usuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUsuario"), 1L, 1);

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("apellido");

                    b.Property<int>("Cedula")
                        .HasColumnType("int")
                        .HasColumnName("cedula");

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("contrasena");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("correo");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("date")
                        .HasColumnName("fechaNacimiento");

                    b.Property<byte[]>("FechaRegistro")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("fechaRegistro");

                    b.Property<int?>("IdClubMember")
                        .HasColumnType("int")
                        .HasColumnName("id_clubMember");

                    b.Property<int>("IdEstado")
                        .HasColumnType("int")
                        .HasColumnName("id_estado");

                    b.Property<int>("IdPermiso")
                        .HasColumnType("int")
                        .HasColumnName("id_permiso");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nombre");

                    b.HasKey("IdUsuario");

                    b.HasIndex("IdClubMember");

                    b.HasIndex("IdEstado");

                    b.HasIndex("IdPermiso");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Entities.Factura", b =>
                {
                    b.HasOne("Entities.Entities.MetodoPago", "IdMetodoPagoNavigation")
                        .WithMany("Facturas")
                        .HasForeignKey("IdMetodoPago")
                        .IsRequired()
                        .HasConstraintName("FK_Facturas_Metodo_Pago");

                    b.HasOne("Entities.Entities.Usuario", "IdUsuarioNavigation")
                        .WithMany("Facturas")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("FK_Facturas_Usuarios");

                    b.Navigation("IdMetodoPagoNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("Entities.Entities.LineaFactura", b =>
                {
                    b.HasOne("Entities.Entities.Factura", "IdFacturaNavigation")
                        .WithMany("LineaFacturas")
                        .HasForeignKey("IdFactura")
                        .IsRequired()
                        .HasConstraintName("FK_Linea_Factura_Facturas");

                    b.Navigation("IdFacturaNavigation");
                });

            modelBuilder.Entity("Entities.Entities.MetodoPago", b =>
                {
                    b.HasOne("Entities.Entities.Usuario", "IdUsuarioNavigation")
                        .WithMany("MetodoPagos")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("FK_Metodo_Pago_Usuarios");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("Entities.Entities.ReservacionEvento", b =>
                {
                    b.HasOne("Entities.Entities.Evento", "IdEventoNavigation")
                        .WithMany("ReservacionEventos")
                        .HasForeignKey("IdEvento")
                        .IsRequired()
                        .HasConstraintName("FK_Reservacion_Eventos_Eventos");

                    b.HasOne("Entities.Entities.Usuario", "IdUsuarioNavigation")
                        .WithMany("ReservacionEventos")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("FK_Reservacion_Eventos_Usuarios");

                    b.Navigation("IdEventoNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("Entities.Entities.ReservacionMesa", b =>
                {
                    b.HasOne("Entities.Entities.Mesa", "IdMesaNavigation")
                        .WithMany("ReservacionMesas")
                        .HasForeignKey("IdMesa")
                        .IsRequired()
                        .HasConstraintName("FK_Reservacion_Mesa_Mesas");

                    b.HasOne("Entities.Entities.Usuario", "IdUsuarioNavigation")
                        .WithMany("ReservacionMesas")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("FK_Reservacion_Mesa_Usuarios");

                    b.Navigation("IdMesaNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("Entities.Entities.ReservacionRanchito", b =>
                {
                    b.HasOne("Entities.Entities.Ranchito", "IdRanchitoNavigation")
                        .WithMany("ReservacionRanchitos")
                        .HasForeignKey("IdRanchito")
                        .IsRequired()
                        .HasConstraintName("FK_Reservacion_Ranchito_Ranchitos");

                    b.HasOne("Entities.Entities.Usuario", "IdUsuarioNavigation")
                        .WithMany("ReservacionRanchitos")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("FK_Reservacion_Ranchito_Usuarios");

                    b.Navigation("IdRanchitoNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("Entities.Entities.ReservacionTenni", b =>
                {
                    b.HasOne("Entities.Entities.TennisCourt", "IdTennisCourtNavigation")
                        .WithMany("ReservacionTennis")
                        .HasForeignKey("IdTennisCourt")
                        .IsRequired()
                        .HasConstraintName("FK_Reservacion_Tennis_Tennis_Courts");

                    b.HasOne("Entities.Entities.Usuario", "IdUsuarioNavigation")
                        .WithMany("ReservacionTennis")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("FK_Reservacion_Tennis_Usuarios");

                    b.Navigation("IdTennisCourtNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("Entities.Entities.Usuario", b =>
                {
                    b.HasOne("Entities.Entities.ClubMember", "IdClubMemberNavigation")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdClubMember")
                        .HasConstraintName("FK_Usuarios_Club_Member");

                    b.HasOne("Entities.Entities.Estado", "IdEstadoNavigation")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdEstado")
                        .IsRequired()
                        .HasConstraintName("FK_Usuarios_Estados");

                    b.HasOne("Entities.Entities.Permiso", "IdPermisoNavigation")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdPermiso")
                        .IsRequired()
                        .HasConstraintName("FK_Usuarios_Permisos");

                    b.Navigation("IdClubMemberNavigation");

                    b.Navigation("IdEstadoNavigation");

                    b.Navigation("IdPermisoNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Entities.ClubMember", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Entities.Entities.Estado", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Entities.Entities.Evento", b =>
                {
                    b.Navigation("ReservacionEventos");
                });

            modelBuilder.Entity("Entities.Entities.Factura", b =>
                {
                    b.Navigation("LineaFacturas");
                });

            modelBuilder.Entity("Entities.Entities.Mesa", b =>
                {
                    b.Navigation("ReservacionMesas");
                });

            modelBuilder.Entity("Entities.Entities.MetodoPago", b =>
                {
                    b.Navigation("Facturas");
                });

            modelBuilder.Entity("Entities.Entities.Permiso", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Entities.Entities.Ranchito", b =>
                {
                    b.Navigation("ReservacionRanchitos");
                });

            modelBuilder.Entity("Entities.Entities.TennisCourt", b =>
                {
                    b.Navigation("ReservacionTennis");
                });

            modelBuilder.Entity("Entities.Entities.Usuario", b =>
                {
                    b.Navigation("Facturas");

                    b.Navigation("MetodoPagos");

                    b.Navigation("ReservacionEventos");

                    b.Navigation("ReservacionMesas");

                    b.Navigation("ReservacionRanchitos");

                    b.Navigation("ReservacionTennis");
                });
#pragma warning restore 612, 618
        }
    }
}
